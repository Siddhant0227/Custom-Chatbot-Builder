"""
Django settings for chatbot_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
from django.core.exceptions import ImproperlyConfigured # Import for SECRET_KEY check

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file for local development
load_dotenv(os.path.join(BASE_DIR, '.env')) 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    raise ImproperlyConfigured("DJANGO_SECRET_KEY not set in environment or .env file")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False # Set to False for production

# ALLOWED_HOSTS for your deployed application
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.render.com', # Allow all subdomains of render.com
    'your-app-name.onrender.com', # Replace with your actual Render app URL
    # Add your custom domain here if you're using one (e.g., 'yourdomain.com')
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',        # Django REST Framework
    'chatbotapi',            # Your application
    'corsheaders',           # For handling Cross-Origin Resource Sharing
    'rest_framework.authtoken', # Enable Django REST Framework's Token Authentication
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Keep this high
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # ADD THIS LINE FOR STATIC FILES IN PRODUCTION
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chatbot_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatbot_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),        # Environment variable from Render
        'USER': os.getenv('DB_USER'),        # Environment variable from Render
        'PASSWORD': os.getenv('DB_PASSWORD'),# Environment variable from Render
        'HOST': os.getenv('DB_HOST'),        # Environment variable from Render
        'PORT': os.getenv('DB_PORT'),        # Environment variable from Render
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Where collectstatic will put files in production

# WhiteNoise configuration for serving static files
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- CORS Settings ---
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    # Add your frontend's deployed URL here, e.g.:
    # "https://your-frontend-app.onrender.com",
    # "https://your-frontend-domain.com",
]
CORS_ALLOW_CREDENTIALS = True

# --- CSRF Trusted Origins for Django 4.0+ ---
# If your frontend and backend are on different subdomains/domains, add your frontend's URL here.
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    # Add your frontend's deployed URL here, e.g.:
    # "https://your-frontend-app.onrender.com",
    # "https://your-frontend-domain.com",
]

# --- Session & CSRF Cookie Settings (recommended for security) ---
# For production, these should generally be True if using HTTPS
SESSION_COOKIE_SAMESITE = 'Lax' # Or 'None' if cross-site, along with SESSION_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True   # Set to True in production (requires HTTPS)
CSRF_COOKIE_SAMESITE = 'Lax'   # Or 'None' if cross-site, along with CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True      # Set to True in production (requires HTTPS)


# --- Django REST Framework (DRF) Settings ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Keep for browsable API
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Only authenticated users can access by default
    ]
}